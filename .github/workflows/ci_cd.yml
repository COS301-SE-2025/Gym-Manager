name: Gym Manager CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint API
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: services/api/package-lock.json

      - name: Install API deps
        run: npm ci
        working-directory: ./services/api

      - name: Lint API
        run: npm run lint
        working-directory: ./services/api

  unit-tests:
    name: Run Unit Tests (API)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: services/api/package-lock.json

      - name: Install API deps
        run: npm ci
        working-directory: ./services/api

      - name: Run API Unit Tests
        run: npm run test:unit
        working-directory: ./services/api
        env:
          # Provide a dummy secret so JWT-related unit tests don’t explode
          JWT_SECRET: ci-unit-secret

  test-availability:
    name: Integration — Availability (/healthz)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: services/api/package-lock.json

      - name: Install API deps
        run: npm ci
        working-directory: ./services/api

      - name: Run synthetic availability probe
        run: npm run test:integration:availability
        working-directory: ./services/api
        env:
          AVAIL_N: 60
          AVAIL_GAP_MS: 50
          AVAIL_MAX_P95_MS: 300
          AVAIL_MAX_ERR_RATE: 0
          JWT_SECRET: ci-integration-secret

  test-security:
    name: Integration — Security (JWT/Helmet/CORS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: services/api/package-lock.json

      - name: Install API deps
        run: npm ci
        working-directory: ./services/api

      - name: Run security integration tests
        run: npm run test:integration:security
        working-directory: ./services/api
        env:
          JWT_SECRET: ci-integration-secret

    test-performance:
    name: Integration (Performance via JMeter)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: services/api/package-lock.json

      - name: Install API deps
        run: npm ci
        working-directory: ./services/api

      # Build & start the API locally like other integration tests do
      - name: Build & start API locally
        run: |
          npm run build || true   # optional if you have a build step
          nohup npm run start &   # start server in background
          sleep 10                # give it a few seconds to boot
        working-directory: ./services/api
        env:
          JWT_SECRET: ci-integration-secret

      - name: Install JMeter
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          JM_VERSION=5.6.3
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-$JM_VERSION.zip
          unzip -q apache-jmeter-$JM_VERSION.zip
          echo "$GITHUB_WORKSPACE/apache-jmeter-$JM_VERSION/bin" >> $GITHUB_PATH

      - name: Run JMeter against local API
        working-directory: ./services/api
        env:
          HOST: localhost
          PROTO: http
          PORT: 3000
          users: 10
          ramp: 10
          duration: 60
          MAX_MS: 300
        run: |
          jmeter -n \
            -t tests/perf/healthz.jmx \
            -l tests/perf/results.jtl \
            -e -o tests/perf/report_html \
            -JHOST=$HOST -JPROTO=$PROTO -JPORT=$PORT \
            -Jusers=$users -Jramp=$ramp -Jduration=$duration -JMAX_MS=$MAX_MS

    
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, test-availability, test-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy API to production
        run: echo "TODO"

      - name: Deploy UI to production
        run: echo "TODO"
